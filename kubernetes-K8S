Drawbacks of dockers:
  -single host 
  -no auto healing - devoper keep track whch container s down 
  -no auto scale 
  -simple platform -no* enterprise level support  eg:no loadbalancer,no firewal ,no auto scale,no api gateway.....
docker cant be a prod bz no enterprise support - may be docker swan useful 

  solution:-k8s
K8S(google) -pods 
  -container orchestration platform
  -its a cluster (group of nodes)master-slave 
  -replica sets to solve auto scale
  -fix/control the damage -if any conatainer down by automatic creates new container    -for auto heal
  -hav multiple enterprise platform support called borg* BY GOOGLE -so its preferable
....
cluster
  -grp of pods
    pod-grp of container
.....
pods: starts here 
  1.define hw to run
  2.pod(one r more containers(one fr app /one fr yaml to execute))
        easy to talk via localhost,share local storage,share netwrk,volume
  y yaml? bz it was standard for enterprise
Terms:
-k8s starts with pod.yaml   
-kubectl -command line for k8s

drwbacks:still no advanced loadbalancer ,Still people prefer virtual machine 

Architecture
control plane  / data plane
   => Master (control plane)
   =>slave/worker (data plane)
slave(3):
--->pod - smallest deployable unit -container run time/wrapper 
--->hav container run time-container D,crio,docker swim  //to run app
--->*kube-let-responsible for run app if issue it will inform kubernetes/control plane nd take necessary action 
--->kube proxy -netwrking, ip ,load balncer -mandatory -every pod has ip -can talk another node

master (control)
--->Api server(heart) -core component -validate the request nd routhrm them -take instructions from external world 
--->scheduler-schedule the resource Like go to node1 /2(isntruction gvn by api server)
--->etcd -key value pair -cluster related info(backup)
--->control manager -contollers -used fr created update del
--->C-C-M (CLOUD CONTROL MANAGER) -

K8s Distribution: have support (better user expr)-some popular 
  k8s-if time is not dependent 
  OPENSHIFT-redhat
  RANCHER -rancher labs
  Tanzo -vmware
  EKS -amazon
  AKS

demo-manage kops
1.create EC2
2.Install dependies like kubectl,python nd kubectl
3give permision if admin fine else fice IAM user permission(aws configure)
4.instal s3 -for storing kops objects (back up)
5.create cluster



minikube
-->install kubectl //cmdline
-->install minikube   //used to create k8s cluster
--->minikube start
      -vm created
      -above vm single node k8s cluster
  ->create yaml file for config
-->kubectl create -f pod.yaml
-->minukube ssh 
-->curl ip
.................................deployment.............................
deployemnt -hav auto scale ,auto healing
  -->pod -- deployment(.yml)gv count for replica  --  Replica set(controller)  -->pods
    controller -maintain desired state=actual state  count of replica 
    deployemnt- wrapper

controller -default controller,RgoCD

DEMO:   deploy-replicas-pod  :auto healing
  -deployment.yml   //add replicas as 1
  -kubectl apply -f pod.yml     //created(3)
        deploy also created pods also created rs also created 
  -kubectl get pods    kubectl get deploy   kubectl get rs
  //kubectl get pods -w   //w-live action
if u delete 1 same time another pod wil create
  -minikube ssh   | ssh -i ip (remote)
.....................
SERVICE:
-load balancing
-lables nd selectors  //not depend on ip only lables thats mentioned in yaml for that nods
-expose to external wrld via load balancer 

Service types:
  node port  -only access inside org vpc -hav wrker node ip address
  load balancer-generqte elastic public ip -acess by everyone(outside wrld)-public 
              -ccm will generate public ip with help of cloud provider   ccm-cloud control manager
  cluster ip -only who hav access to wrker node /k8s cluster netwrk (inisde k8s)
             -has load balancing ,discovery

INNGRESS:
Y ingress?
  enterprise TLS load balancing -
          ratio based,black listing ,white listing,domain based....
  cloud provide chrge for ip bz of static ip

  ingress resourse ( load balancer cmpy creates ingress controller nd posted in github)
              load balancers:nginx,f5,ambasidor,HA proxy...
  user deploy ingress controller(ngnix) in k8s cluste nd depend on req define  ingress  yaml file define (white listing...) 
  ingress contoller watch for ingress resourse  nd provide the feature
