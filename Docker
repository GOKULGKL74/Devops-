code -> docker file (build)-> image(run) ->container
docker build-build docker img from dockerfile
docker run-run the container from docker img
docker push-push container img to private/public registry to share img

BASICS:
dockerfile - txt document that conatins commands to assemble img 
             docker read ths file nd build img
image(template): create image that microservice to run eg:os,run time,code ,code depenencies   -static 
      when u run image it becomes container 
Containers -container encapsulates app with os.that placed on machine
Docker: virtualisation software
run our application in isolated environmnt (container)

docker hub is registory
docker registry -collection of repo
docker repo -collection of related image with same 

  architecture:
    1.Runtime 
        -RunC -start nd stop 
        -ContainerD -manage Runc ,pull image,interact with internet
    2.Docker Engine -daemon-heart -if daemon dwn dcker sops wrk
    3.orchestation -manage conatiner

practise:
1.docker run hello-world     //hello world -image                     
   searching hello-world img in local
    if yes 
      RUN the image (by daemon)
    else 
      download from image docker registory and change to conatiner (daemon helps to chnge from img to conatiner)
2.docker ps    //check which is running
3.docker container ls   //listing container
4.docker container exec -it id bash    //id -#id which is running ,bash added to running container
5.docker stop id   //to stop container
6.docker rm id   //remove container
7.docker container prune -f   //delete stopped container at once
  remove all images at once 
    docker images -q (get all images)
    docker rmi $(docker images -q) -f    //remove all images
8.docker run -d p 8080:80 nginix    //check in browser nginix avalible in 8080
      8080 -own choice   80-nginx port 

save the content we wrked
1.docker commit -m "created" id name:1.1    //id -docker id  1.1 -tag/version 
run:> docker run -it name:1.1

---------------DEMO----------

create account in docker and login 
      docker login
step1:create repository
      mkdir myapp
      cd myapp
step2:create file
      echo "hello" >index.html
step3:create docker file
      touch Dockerfile
step4:open dockerfile add lines        //instruction to build docker image
      FROM nginx:1.10             //base image where to run
      COPY index.html /path   //action 
step5:start docker nd build** docker image from dockerfile
      docker build -t myimage:1:01 .   [create folder . represts current folder that send all current folder nd files to docker]
      //now docker search dockerfile in current directory nad build image (myimage) 
step6:run docker container from img
      docker run -p 8080:80 myimage       //p -map port 8080(nginx) to 80 inside container   //can edit 
      docker run -d -p 8080:80 myimage    //-d detach mode -no access to edit 
step7: http:localhost:8080


demo -pull images
step1:docker pull nginx:1.23  

step2:docker run -d nginx:1.23 myname
      /docker run nginx:1:25  //if yes run else pull from directry
--------------
Multi-stage:
  split your docker file into multiple stages and minimizee the size (what exactly need just copy into another stage and build it)
  can build n number of stage with 1 final stage
----Distroless---
  minimize the image/light weight  with no pakage 
  that has only runtime
  good in security 

eg:scratch

---------------------
drawback:
1. once docker stoped we cannt access the info bz it was destroyed(if docker down -all waste)
    cant see previous logs 
2. if any front / backend goes down - this cause issue
3.docker ca access all data but dont knw how

soln:
  bind mount ,
  volumes
  




